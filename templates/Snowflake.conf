name = ""
code = ""
connector_id = "Snowflake"
enabled = true

connection {
    # JDBC URL (see: https://docs.snowflake.com/en/developer-guide/jdbc/jdbc-configure)
    #
    # Acount identifier is typically "<orgname>-<account_name>" (see: https://docs.snowflake.com/en/user-guide/admin-account-identifier)
    # The "db" parameter is always required to initialize the connection. 
    # If multi_catalog is enabled, the connection database will be used to collect the list of the other databases. 
    # Role and Warehouse parameters are optional if the user hase default values defined.
    #
    url = "jdbc:snowflake://<account_identifier>.snowflakecomputing.com/?db=<database>&role=<role>&warehouse=<warehouse>"
    username = ""
    password = ""
    #privateKeyPath = ""
    #passphrase = ""
}

# Multi catalog support.
#
# Allow a single connection to manage all catalog (or databases) of the instance.
# Default value is false for backward compatibility reasons but this template enables it by default.
#
# Warning: this parameter should not be changed after datasets have been imported because it changes the ways they are identified.
#
multi_catalog.enabled = true

# Data classification section
#
# enabled = "true" # or "false" # enable or disable (default if missing) data classification feature
#dataClassification.enabled = "true"

#
# By enabling the cache, you can improve the performance of the update schema operations by switching the update schema 
# from unitary queries to assembly queries. Instead of executing four queries per imported table, the connector only execute four queries per catalog.
# The result is stored in a file in the folder given as a parameter and is reused during the time-to-live period.
# The avoid  again the queries between two small imports operations.
# The size of the file depends on the number of tables in the database.
#
# Warning: Currently, enabling cache automatically disable pipe and history lineage.
# This limitation should be removed in a future release.
#
cache {
    # Enables the cache
    enabled = false

    # Folder were caches are stored, if not set cache will be stored in memory.
    #folder = "/path/to/zeenea-scanner/cache"
    
    # Cache time-to-live period. (Don't apply to memory cache)
    # Format: ISO-8601 (PnDTnHnMn.nS) ; example: "P1D": 1 day, "PT12H": 12 hours 
    # Default: 12 Hours
    #ttl = "PT12H"
}

# Filter
#
# Filter the relations (tables or views) that should be keep in the inventory.
# Use the rich filter language describe in documentation.
#       English version: https://support.zeenea.com/hc/en/articles/21269299175569-Filtres
#       French  version: https://support.zeenea.com/hc/fr/articles/21269299175569-Filtres
#
# filter keys are:
#   catalog: the catalog name (only availaible if multi catalog is enabled)
#   schema : the schema name.
#   table  : the table or view name.
#
# Example:
#   filter = """
#           catalog in ('PRODUCTION', 'QA') 
#       and (
#              schema starts with 'CUSTOM_' and not table ends with '_BAK'
#           or schema ~ 'INTERN_*' and table ~ /(?:HR|IT|MARKET)_FIGURES/
#           or schema = 'MUSIC' and table contains 'ALBUMS' and table != 'OLD_ALBUMS'
#           )
#   """
#
# Note: Filter can contain either the raw value or a file URL to the content. (e.g. file:///path/to/zeenea/connections/snowflake-filter.json)
# When using an side-file, filter changes are taken into account without restarting the scanner.
# filter = ""

# Lineage section
#lineage {
#    view.enabled = false
#    pipe.enabled = false
#    history {
#       enabled = false
#
#       # The name of the Warehouse where the queries are executed.
#       #warehouse = ""
#
#       # Number of days to analyse the queries between the start of the extraction and this number.
#       period = "10"
#    }
#}

# Add filter to includes/exludes dataset that matches given pattern
#
# **Deprecated** : These filters are deprecated and will be remove in a near future. Use filter parameter instead.
#
# Migration example:
#   inventory {
#        includes = "HR like:IT% MARKET"
#        excludes = "like:IT_SECRETS%"
#   }
#
#  Should be replaced by 
#   filter = """(schema in ('HR', 'MARKET') or schema ~ 'IT*') and not schema ~ 'IT_SECRETS*'"""
#
#  (In fact, the end of the filter should be "not schema ~ 'IT?SECRETS*'" for an exact equivalence. 
#  But we supposed that the "_" was not used as a wildcard on purpose.)
#
#inventory {
    #includes = ""
    #excludes = ""
#}

