name = 
code = 
connector_id = "Snowflake"

connection {
    # JDBC URL
    url = 
    username = 
    password =
    #privateKeyPath = ""
    #passphrase = ""
}

# Multi catalog support.
#
# Allow a single connection to manage all catalog (or databases) of the instance.
# Default value is false for backward compatibility reasons but this template enables it by default.
#
# Warning: this parameter should not be changed after datasets have been imported because it changes the ways they are identified.
#
multi_catalog.enabled = true

# Data classification section
#
# enabled = "true" # or "false" # enable or disable (default if missing) data classification feature
#dataClassification.enabled = "true"

# Filter
#
# Filter the relations (tables or views) that should be keep in the inventory.
# Use the rich filter language describe in documentation.
#       English version: https://support.zeenea.com/en/support/solutions/articles/44002389524-filters
#       French  version: https://support.zeenea.com/fr/support/solutions/articles/44002389524-filtres
#
# filter keys are:
#   catalog: the catalog name (only availaible if multi catalog is enabled)
#   schema : the schema name.
#   table  : the table or view name.
#
# Example:
#   filter = """
#           catalog in ('PRODUCTION', 'QA') 
#       and (
#              schema starts with 'CUSTOM_' and not table ends with '_BAK'
#           or schema ~ 'INTERN_*' and table ~ /(?:HR|IT|MARKET)_FIGURES/
#           or schema = 'MUSIC' and table contains 'ALBUMS' and table != 'OLD_ALBUMS'
#           )
#   """
#
# Note: Filter can contain either the raw value or a file URL to the content. (e.g. file:///path/to/zeenea/connections/snowflake-filter.json)
# When using an side-file, filter changes are taken into account without restarting the scanner.
# filter = ""

# Lineage section
#lineage {
#    view.enabled = false
#    pipe.enabled = false
#    history.enabled = false
#}

# Add filter to includes/exludes dataset that matches given pattern
#
# **Deprecated** : These filters are deprecated and will be remove in a near future. Use filter parameter instead.
#
# Migration example:
#   inventory {
#        includes = "HR like:IT% MARKET"
#        excludes = "like:IT_SECRETS%"
#   }
#
#  Should be replaced by 
#   filter = """(schema in ('HR', 'MARKET') or schema ~ 'IT*') and not schema ~ 'IT_SECRETS*'"""
#
#  (In fact, the end of the filter should be "not schema ~ 'IT?SECRETS*'" for an exact equivalence. 
#  But we supposed that the "_" was not uses as a wildcard on purpose.)
#
#inventory {
    #includes = ""
    #excludes = ""
#}

