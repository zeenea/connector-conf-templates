name = ""
code = ""
connector_id = "Teradata"
enabled = true

# Define the catalog code associated with the connection ("default" when empty).
# catalog_code = ""

# Defines the list of aliases used by other connectors to generate lineage link.
# alias = ["localhost:1234/db","https://some-url.org"]

# Define secret manager for this connection. 
# This configuration only works with Scanner 73+ and needs a functional secret manager configured in the scanner configuration file.
#secret_manager {
#    enabled = true
#    key = "<secret_name>"
#}

connection {
    # JDBC URL
	# It is possible to add JDBC parameter, such as session CHARSET (example : "jdbc:teradata://localhost/CHARSET=UTF8")
    url = ""
    username = ""
    password = ""
}

#
# By enabling the cache, you can improve the performance of the update schema operations by switching the update schema 
# from unitary queries to assembly queries. Instead of executing four queries per imported table, the connector only execute four queries in total.
# The result is stored in a file in the folder given as a parameter and is reused during the time-to-live period.
# The avoid  again the queries between two small imports operations.
# The size of the file depends on the number of tables in the database.
#
cache {
    # Enables the cache
    enabled = false

    # Folder were caches are stored, if not set cache will be stored in memory.
    #folder = "/path/to/zeenea-scanner/cache"
    
    # Cache time-to-live period. (Don't apply to memory cache)
    # Format: ISO-8601 (PnDTnHnMn.nS) ; example: "P1D": 1 day, "PT12H": 12 hours 
    # Default: 12 Hours
    #ttl = "PT12H"
}

# # Fine-tuning of Inventory
# inventory { 
#
#   # Retrieve Primary Indexes as Primary key if parameter set to "primary_index"
#   # Default value is "primary_key"
#   primary_key = 
#
# }

# Filter Inventory
#
# Filter the relations (tables or views) that should be keep in the inventory.
# Use the rich filter language described in documentation.
# https://zeenea-platform-docs.netlify.app/docs/zeenea-filters
#
# filter keys are:
#   schema : the schema name.
#   table  : the table or view name.
#   type   : table type (see all table type here : https://docs.teradata.com/r/Teradata-VantageTM-Data-Dictionary/March-2019/View-Column-Values/TableKind-Column)
#
#   filter = """
#           schema in ('production', 'qa') 
#       and (
#              shema begins with 'custom_' and not table ends with '_bak'
#           or shema ~ 'intern_*' and table ~ /(?:hr|it|market)_figures/ )
#       and type in ('T','V')
#   """
#
# Note: Filter can contain either the raw value or a file URL to the content. (e.g. file:///path/to/zeenea/connections/teradata-inventory-filter.json)
#       When using an side-file, filter changes are taken into account without restarting the scanner.
#
#filter = ""

# Filter Roles 
#
# Filter the roles (dataset metadata) that should be keep during import.
# Use the rich filter language describe in documentation.
#
# filter keys are:
#   role : the role name.
#
# Example : 
#   roles = """
#           role in ('role1', 'role2') 
#       and (not role ~ '*_tmp' and role ~ /(?:hr|it|market)_role/
#   """
#
# Note: Filter can contain either the raw value or a file URL to the content. (e.g. file:///path/to/zeenea/connections/teradata-roles-filter.json)
#       When using an side-file, filter changes are taken into account without restarting the scanner.
#
#roles = ""

# Define which DBC's view will be used to extract columns metadata :
# - use_qvci = "false" => DBC.ColumnsV (default value, table's columns metadata only)
# - use_qvci = "true" => DBC.ColumnsQV (table's and view's columns metadata)
#
# Before set use_qvci flag to "true", you must activate QVCI (Queryable Column Information on Views) feature on Teradata side.
#extract.dbc.use_qvci = "false"

lineage {
    # Activate Lineage on Views (true by default)
    #view.enabled = "true"
}
