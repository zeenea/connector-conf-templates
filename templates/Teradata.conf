name = 
code = 
connector_id = "Teradata"

connection {
    # JDBC URL
	# It is possible to add JDBC parameter, such as session CHARSET (example : "jdbc:teradata://localhost/CHARSET=UTF8")
    url = 
    username = 
    password =
}

# # Fine-tuning of Inventory
# inventory { 
#
#   # List of database to exclude during inventory (ex : "SQLJ TDQCD")
#   # Default list is "like:SYS% NULLID SQLJ TDQCD TDStats TD_SERVER_DB TD_SYSFNLIB TD_SYSXML dbcmngr"
#   # **Deprecated** : These filters are deprecated and will be remove in a near future. Use filter parameter instead.
#   excludes =
#
#   # List of database to include during inventory (ex : "My_DB1 My_SB3")
#   # Default list is empty (includes all)
#   # **Deprecated** : These filters are deprecated and will be remove in a near future. Use filter parameter instead.
#   includes = 
#
#   # List of table type to include during inventory (ex : "M T V")
#   # Default list is empty (includes all)
#   # **Deprecated** : This filter is depracated and is not usable anymore. Use filter parameter instead.
#   types = 
#
#   # Retrieve Primary Indexes as Primary key if parameter set to "primary_index"
#   # Default value is "primary_key"
#   primary_key = 
#
# }

# Filter Inventory
#
# Filter the relations (tables or views) that should be keep in the inventory.
# Use the rich filter language describe in documentation.
#       English version: https://support.zeenea.com/en/support/solutions/articles/44002389524-filters
#       French  version: https://support.zeenea.com/fr/support/solutions/articles/44002389524-filtres
#
# filter keys are:
#   schema : the schema name.
#   table  : the table or view name.
#   type   : table type (see all table type here : https://docs.teradata.com/r/Teradata-VantageTM-Data-Dictionary/March-2019/View-Column-Values/TableKind-Column)
#
#   filter = """
#           schema in ('production', 'qa') 
#       and (
#              shema begins with 'custom_' and not table ends with '_bak'
#           or shema ~ 'intern_*' and table ~ /(?:hr|it|market)_figures/ )
#       and type in ('T','V')
#   """
#
# Note: Filter can contain either the raw value or a file URL to the content. (e.g. file:///path/to/zeenea/connections/teradata-inventory-filter.json)
#       When using an side-file, filter changes are taken into account without restarting the scanner.
#
#filter = ""

# Filter Roles 
#
# Filter the roles (dataset metadata) that should be keep during import.
# Use the rich filter language describe in documentation.
#
# filter keys are:
#   role : the role name.
#
# Example : 
#   roles = """
#           role in ('role1', 'role2') 
#       and (not role ~ '*_tmp' and role ~ /(?:hr|it|market)_role/
#   """
#
# Note: Filter can contain either the raw value or a file URL to the content. (e.g. file:///path/to/zeenea/connections/teradata-roles-filter.json)
#       When using an side-file, filter changes are taken into account without restarting the scanner.
#
#roles = ""

# Define which DBC's view will be used to extract columns metadata :
# - use_qvci = "false" => DBC.ColumnsV (default value, table's columns metadata only)
# - use_qvci = "true" => DBC.ColumnsQV (table's and view's columns metadata)
#
# Before set use_qvci flag to "true", you must activate QVCI (Queryable Column Information on Views) feature on Teradata side.
#extract.dbc.use_qvci = "false"

