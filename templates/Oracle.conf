name = 
code = 
connector_id = "Oracle"

connection {
    # JDBC URL
    # 
    # Examples:
    # With service name:
    #    url = "jdbc:oracle:thin:@//host:port/service"
    #
    # With SID:
    #    url = "jdbc:oracle:thin:@host:port:sid"
    #
    # With TNS:
    #    url = "jdbc:oracle:thin:@tnsname"
    #
    # With TCPS:
    #    url = """jdbc:oracle:thin:@(DESCRIPTION=
    #       (ADDRESS=
    #           (PROTOCOL=TCPS)
    #           (PORT=2484)
    #           (HOST=myoracle.example.com))
    #       (CONNECT_DATA=(SERVICE_NAME=xepdb1)))"""
    #
    # With TCPS and server DN specification:
    #    url = """jdbc:oracle:thin:@(DESCRIPTION=
    #       (ADDRESS=
    #           (PROTOCOL=TCPS)
    #           (PORT=2484)
    #           (HOST=myoracle.example.com))
    #       (CONNECT_DATA=(SERVICE_NAME=xepdb1))
    #       (SECURITY=(ssl_server_cert_dn="CN=myoracle.example.com,OU=databases,O=acme,C=FR")))"""

    url = 

    # User and Password authentication    
    # username = 
    # password =

    # Enabled TCPS user authentication (if true, then the TLS client certificate will be used to authenticate de user.)
    # Requires the "tls.keystore.*" properties to be set.
    # tcps_authentication = false
}

#
# Certificate stores need to support TCPS.
# Caution: due to specific implementation of the PKCS#12 file format, the Oracle Wallet format is not supported. (Neither ewallet.p12 nor cwallet.sso)
# The stores must be in a standard PKCS#12 format or in the JKS format created by the keytool utility.
#
# tls {
#     # TLS Trust Store Should contain the certificate of the authority that signed the server certificate.    
#     truststore {
#         path = 
#         password = 
#         # either 'JKS' or 'PKCS12', can be guessed from the file extension ('.jks' or '.p12')
#         type = PKCS12
#     }
#     # TLS Key Store Should contain the client certificate and its private key.
#     keystore {
#         path = 
#         password = 
#         # either 'JKS' or 'PKCS12', can be guessed from the file extension ('.jks' or '.p12')
#         type = PKCS12
#     }
# }

# oracle {
#     # Change the table set used for metadata collection.
#     # Can have two values: "dba" or "all".
#     # When "dba" tableset is used, the Zeenea Oracle user required select permissions on the DBA_* views.
#     # The default value is "dba".
#     # When "all" tableset is user, the Zeenea Oracle user required select permissions on any table that need to be imported.
#     #
#     tableset = "dba"
# }

# Filter
#
# Filter the relations (tables or views) that should be keep in the inventory.
# Use the rich filter language describe in documentation.
#       English version: https://support.zeenea.com/hc/en/articles/21269299175569-Filtres
#       French  version: https://support.zeenea.com/hc/fr/articles/21269299175569-Filtres
#
# filter keys are:
#   schema : the schema name.
#   table  : the table or view name.
#
# Example:
#   filter = """
#              schema starts with 'CUSTOM_' and not table ends with '_BAK'
#           or schema ~ 'INTERN_*' and table ~ /(?:HR|IT|MARKET)_FIGURES/
#           or schema = 'MUSIC' and table contains 'ALBUMS' and table != 'OLD_ALBUMS'
#   """
#
# Note: Filter can contain either the raw value or a file URL to the content.
# Example:
#   filter = "file:///path/to/zeenea/connections/oracle-filter.json"
#
# When using an side-file, filter changes are taken into account without restarting the scanner.
#
# filter = ""

# Activate Lineage on Views (false by default)
# lineage.view.enabled =
