name = ""
code = ""
connector_id = "matillion"

connection {
    # The URL of the Matillion server. eg: https://matillion.example.com
    url = ""
    # User name
    username = ""
    # User Password
    password = ""
	
	# custom http client timeout in ms (default 180000 ms)
	# e.g. : timeout = 300000 
	#  - After 5 mn, if no http response received, a timeout exception throw
	# timeout =
}

# Multi catalog support.
#
# Tells that the backing database is configured with the multi catalog option or not.
# The value should be the same as in the corresponding connection.
#
#multi_catalog.enabled = false


# Filter Inventory
#
# Filter the jobs (transformation only for now) that should be synchronized.
# Use the rich filter language describe in documentation.
#       English version: https://support.zeenea.com/en/support/solutions/articles/44002389524-filters
#       French  version: https://support.zeenea.com/fr/support/solutions/articles/44002389524-filtres
#
# filter keys are:
#   group   : the name of the group.
#   project : the project name.
#   job     : the job name.
#
#   filter = """
#           group in ('production', 'qa') 
#       and (
#              project begins with 'custom_' and not job ends with '_bak'
#           or project ~ 'intern_*' and job ~ /(?:hr|it|market)_figures/ 
#       )
#   """
#
# Note: Filter can contain either the raw value or a file URL to the content. (e.g. file:///path/to/zeenea/connections/teradata-inventory-filter.json)
#       When using an side-file, filter changes are taken into account without restarting the scanner.
#
#filter = ""

# List of version rules separated by a comma.
#
# Only one version of a project is synchronized.
# The rules are used to define which version of a project should be synchronized.
#
# Each rules consist of three segments separated by a slash "/".
# The first segment is a pattern that should match the group name.
# The second segment is a pattern that should match the project name.
# The last one is the version name to use. It can uses variable if caturing groups have been defined in the other regex.
#
# If the project matches no rule, the synchronized version will be "default".
#
# Example: versions="g1/p1/v1,group(\d+)/project(\d+)/version_$1_$2,.*/.*/other_default"
#    1 - g1/p1/v1 : The version "v1" of project "p1" of the group "g1" will be synchronized.
#    2 - g(\d+)/p(\d+)/v_$1_$2 : For all project "p<num>" ("p1", "p2"…) in groups "g<num>" ("g1", "g2"…) the version v_<num_group>_<num_project> will be synchronized.
#    3 - for others groups/projects, the "other_default" version will be used.
#
#versions = """"""

# tls {
#   truststore {
#     # Path to the trust store file
#     path = ""
#     # Password of the trust store file.
#     password = "changeit"
#     # Type of the trust store file. (PKCS12 ou JKS), default value is discovered from the file extension.
#     #type = ""
#   }
#   # By Pass Certificate Validation, default is false. (should be kept false)
#   #bypass_certificate_validation = "true"
# }

# proxy {
#     #  proxy scheme (choose https or http)
#     scheme =
#     hostname =
#     port =
#     #username =
#     #password =
# }
