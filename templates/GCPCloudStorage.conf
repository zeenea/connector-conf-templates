name = 
code = 
connector_id = "GCPCloudStorage"

connection {
    project_id = 

    # JSON key as a file by setting a absolute file URL (e.g. file:///etc/google/zeenea-key.json)
    json_key = 
}

# Use new XML namespace identification, replace with value "legacy" if XML were imported from the connection before.
xml.namespace_identification = "uri"


# Filter
#
# Filter the objects that should be taken into consideration by the inventory.
#
# Use the rich filter language describe in documentation.
#       English version: https://support.zeenea.com/en/support/solutions/articles/44002389524-filters
#       French  version: https://support.zeenea.com/fr/support/solutions/articles/44002389524-filtres
#
# filter keys are:
#   bucket: the bucket name.
#   name  : the name of the object in the bucket.
#
# If there is an object 'gs:///cogip_prod_sales/forecasts/europa/france/paris-2023.parquet'.
# The value of associated to 'bucket' will be 'cogip_prod_sales'.
# The value of associated to 'name' will be 'forecasts/europa/france/paris-2023.parquet'.
#
# Example:
#   filter = """
#           bucket starts with 'cogip_prod_'
#       and ! (
#              key ~ '*/test*'
#           or key ~ /.*\/secret_assets\/.*/
#           )
#   """
#
# Note: Filter can contain either the raw value or a file URL to the content.
# Example:
#   filter = "file:///path/to/zeenea/connections/gs-filter.json"
#
# When using an side-file, filter changes are taken into account without restarting the scanner.
#
# filter = ""
