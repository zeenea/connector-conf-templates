name = ""
code = ""
connector_id = "palantir"

connection {

    # Palantir Foundry Server URL
    # Example http://palantir.example.com:8080
    url = ""

    # Token settings
    # token = ""

    #
    # OAuth2 settings
    #
    # (optional) OAuth2 endpoint
    # Default value get it from connection.url parameter completed by "/multipass/api/oauth2/token".
    #
    # Example: "http://palantir.example.com:8080/multipass/api/oauth2/token"
    #
    # oauth.endpoint = ""

    # Application ID (client) as defined in Palantir.
    oauth.client_id = ""

    # Application's password (client) as defined in Palantir.
    oauth.client_secret = ""
    # oauth.scope = ""

    # Google Cloud Storage
    # google_cloud {
    #     # Project Id used at connection. Invoices will be sent to this project.
    #     project_id = ""
    #
    #     # JSON key either as an embedded raw value (use triple quotes """{ "json: "here" }""")
    #     # Or as a file by setting a absolute file URL (e.g. file:///etc/bigquery/zeenea-key.json)
    #     json_key = ""
    # }

    # Amazon S3
    #
    # The connector uses the official Amazon SDK.
    # So the following parameters can be set to specify a region and an access key.
    # If not set, information will be taken from:
    #   1. environment variables
    #   2. shared credential and config files
    #   3. ECS container or EC2 instance role.
    #
    # see Amazon documentation <https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/credentials.html>
    #
    # aws {
    #     access_key_id = ""
    #     secret_access_key = ""
    #     region = "eu-west-3"
    # }

    # Azure ADLS Gen 2
    #
    # Two authentication methods are available:
    # 1. Service Account OAuth2 credentials (client_id, client_secret, tenant_id)
    # 2. Account Key (account_name, account_key)
    #
    # azure {
    #     # OAuth2 credentials
    #     tenant_id = null
    #     client_id = null
    #     client_secret = null
    #
    #     # Account Key
    #     account_name = null
    #     account_key = null
    # }
}

inventory {
    # Path to the file that contains RIDs (optional)
    #
    # Must be formatted like :
    #  - Amazon S3 : s3://[bucket_name]/[optional_prefix]/[file_name]
    #  - Google Storage : gs://[bucket_name]/[optional_prefix]/[file_name]
    #  - Azure ADLS Gen 2 : "http://[account_name].dfs.core.windows.net/[container_name]/[optional_prefix]/[file_name]"
    #  - File System : file:///[path_to_file] or [path_to_file]
    # file_path = ""

    # From Data Catalog (optional, default false)
    from_datacatalog = "true"
    # With Ontology (optional, default false)
    with_ontology = "false"
}

# Filter
#
# Filter the jobs that should be imported during synchronization process.
# Use the rich filter language describe in documentation.
#       English version: https://support.zeenea.com/hc/en/articles/21269299175569-Filtres
#       French  version: https://support.zeenea.com/hc/fr/articles/21269299175569-Filtres
#
# filter keys are:
#   collection : To filter collection by name
#
# Example:
#   filter = "collection != 'Project Catalog'"
#
# Note: Filter can contain either the raw value or a file URL to the content. (e.g. file:///path/to/zeenea/connections/palantir-filter.json)
# When using an side-file, filter changes are taken into account without restarting the scanner.
#filter = ""

# tls {
#  truststore {
#    # Path to the trust store file
#    path = ""
#    # Password of the trust store file.
#    password = ""
#    # Type of the trust store file. (PKCS12 ou JKS), default value is discovered from the file extension.
#    type = ""
#  }
#  # By Pass Certificate Validation, default is false. (should be kept false)
#  #bypass_certificate_validation = "true"
# }

# proxy {
#     #  proxy scheme (choose https or http)
#     scheme =
#     hostname =
#     port =
#     #username =
#     #password =
# }
